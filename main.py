#!/usr/bin/env python
# -*- coding: utf-8 -*- 

from aiogram import types
from aiogram.utils import executor
from aiogram.types import ParseMode
import aiosqlite
import asyncio

import authorisation
import config
import engine
from keyboards import Keyboards
from db import SQL

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
bot, dp = authorisation.main()


""" COMMANDS """


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(lambda message: str(message.chat.id) == config.id_admin,
                    lambda add_mass: config.add_mass == [], commands=['help', 'start'])
async def send_welcome(message: types.Message):
    print(message)
    await bot.delete_message(message.chat.id, message.message_id)
    await message.answer(
        "üêâ –ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π\n"
        "/search *what* - –ü–æ–∏—Å–∫ –ø–∞—Ä–æ–ª—è\n"
        "/create - –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—É\n"
    )


# –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–∑–µ
@dp.message_handler(lambda message: str(message.chat.id) == config.id_admin,
                    lambda add_mass: config.add_mass == [], commands=['list'])
async def send_list(message: types.Message):
    show_list = Keyboards()
    data_list = await show_list.list_keyboard()
    await bot.delete_message(message.chat.id, message.message_id)
    if not data_list.inline_keyboard:
        await message.answer('ü§∑‚Äç‚ôÇÔ∏è–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ /create, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.')
    else:
        await message.answer('üóí –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:', reply_markup=data_list)


# –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –ø–æ –ø–æ–∏—Å–∫—É
@dp.message_handler(lambda message: str(message.chat.id) == config.id_admin,
                    lambda add_mass: config.add_mass == [], commands=['search'])
async def send_list(message: types.Message):
    if len(message.text.split()) > 1:
        await bot.delete_message(message.chat.id, message.message_id)
        value_search = message.text.split()[1]
        show_list = Keyboards(value_search, 1)
        data_list = await show_list.list_keyboard()
        if not data_list.inline_keyboard:
            await message.answer('ü§∑‚Äç‚ôÇÔ∏è–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ /create, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.')
        else:
            await message.answer(f'üóí –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{value_search}</b>:',
                                 reply_markup=data_list, parse_mode=ParseMode.HTML)
    else:
        await message.answer(f'üóí –£–∫–∞–∂–∏—Ç–µ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ',
                             parse_mode=ParseMode.HTML)


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ
@dp.message_handler(lambda message: str(message.chat.id) == config.id_admin,
                    lambda add_mass: config.add_mass == [], commands=['create'])
async def create_password(message: types.Message):
    message_temp = await message.answer(
        'üñã –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–í–≤–µ–¥–∏ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ')
    config.var_mass.append(message.message_id)
    config.var_mass.append(message_temp.message_id)

    for i in range(7):
        config.add_mass.append(False)


# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
@dp.message_handler(lambda message: str(message.chat.id) == config.id_admin,
                    lambda add_mass: config.add_mass != [], commands=['cancel'])
async def cancel_creating(message: types.Message):
    temp = await message.answer('üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑—É –æ—Ç–º–µ–Ω–µ–Ω–æ')
    asyncio.create_task(engine.delete_message(temp.message_id, 30))

    for i in config.var_mass:
        await bot.delete_message(config.id_admin, i)

    config.add_mass = []
    config.id_admin = []


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
@dp.message_handler(lambda message: str(message.chat.id) == config.id_admin,
                    lambda add_mass: config.add_mass != [])
async def send_list(message: types.Message):
    temp_text = ''
    if not config.add_mass[1]:
        config.add_mass[1] = message.text
        message_temp = await message.answer(
            f'üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{message.text}</b>\n–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \'none\', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
            parse_mode=ParseMode.HTML)
        config.var_mass.append(message.message_id)
        config.var_mass.append(message_temp.message_id)

    elif not config.add_mass[2]:
        config.add_mass[2] = message.text
        if message.text != 'none':
            temp_text = f'üìù –ù–∏–∫–Ω–µ–π–º: <b>{message.text}</b>\n'

        message_temp = await message.answer(
            temp_text+'–í–≤–µ–¥–∏ email –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \'none\', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø',
            parse_mode=ParseMode.HTML)
        config.var_mass.append(message.message_id)
        config.var_mass.append(message_temp.message_id)

    elif not config.add_mass[3]:
        config.add_mass[3] = message.text
        if message.text != 'none':
            temp_text = f'üìù Email: <b>{message.text}</b>\n'

        message_temp = await message.answer(
            temp_text+'–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \'none\', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø',
            parse_mode=ParseMode.HTML)
        config.var_mass.append(message.message_id)
        config.var_mass.append(message_temp.message_id)

    elif not config.add_mass[4]:
        config.add_mass[4] = message.text
        if message.text != 'none':
            temp_text = f'üìù –ü–∞—Ä–æ–ª—å: <b>{message.text}</b>\n'

        message_temp = await message.answer(
            temp_text+'–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \'none\', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø',
            parse_mode=ParseMode.HTML)
        config.var_mass.append(message.message_id)
        config.var_mass.append(message_temp.message_id)

    elif not config.add_mass[5]:
        config.add_mass[5] = message.text
        if message.text != 'none':
            temp_text = f'üìù –°—Å—ã–ª–∫–∞: <b>{message.text}</b>\n'

        message_temp = await message.answer(
            temp_text+'–í–≤–µ–¥–∏ —Ç—ç–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \'none\', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø',
            parse_mode=ParseMode.HTML)
        config.var_mass.append(message.message_id)
        config.var_mass.append(message_temp.message_id)

    elif not config.add_mass[6]:
        config.add_mass[6] = message.text
        temp_text = 'üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ:\n'
        temp_text += await engine.add_temp_text(config.add_mass)

        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≥–¥–µ –Ω–∞–¥–æ
        for i in config.add_mass:
            if i == 'none':
                config.add_mass[config.add_mass.index(i)] = None

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        hej = SQL()
        sql_index = await hej.create(config.add_mass)   # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        config.var_mass.append(message.message_id)
        for i in config.var_mass:
            await bot.delete_message(config.id_admin, i)

        # –°—Ç–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤—ã
        config.add_mass = []
        config.var_mass = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        inline_edit_keyboard = await Keyboards.edit_keyboard(sql_index)
        await message.answer(temp_text, parse_mode=ParseMode.HTML, reply_markup=inline_edit_keyboard)


""" CALLBACK """


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–∫–µ –ø–∞—Ä–æ–ª–µ–π
@dp.callback_query_handler(lambda c: 'inline_button_password' in c.data,
                           lambda add_mass: config.add_mass == [])
async def process_callback_keyboard_list(callback_query: types.CallbackQuery):
    # –û—Ç–¥–µ–ª—è–µ–º –æ—Ç callback_query –∏–Ω–¥–µ–∫—Å
    index = int(callback_query.data.split('-')[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–µ
    async with aiosqlite.connect(config.database_name) as db:
        async with db.execute("SELECT * FROM {};".format('passwords_table')) as cursor:
            async for row in cursor:
                print(row, index)
                if int(row[0]) == index:
                    temp_text = await engine.add_temp_text(row)
                    inline_edit_keyboard = await Keyboards.edit_keyboard(int(row[0]))
                    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
                    temp = await bot.send_message(callback_query.message.chat.id, temp_text,
                                                  parse_mode=ParseMode.HTML, reply_markup=inline_edit_keyboard)
                    asyncio.create_task(engine.delete_message(temp.message_id, 600))
                    

# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
@dp.callback_query_handler(lambda c: 'inline_button_list' in c.data,
                           lambda add_mass: config.add_mass == [])
async def process_callback_keyboard_page(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split('-')[1])

    if index > 0:   # –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü, –º–µ–Ω—å—à–µ –∑–∞ 1
        if callback_query.message.text == 'üóí –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:':  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
            show_list = Keyboards('', index)
            data_list = await show_list.list_keyboard()
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            await bot.send_message(callback_query.message.chat.id, 'üóí –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:', reply_markup=data_list)
        else:   # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            value_search = callback_query.message.text[len('üóí –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É'):-1]
            print(value_search)
            show_list = Keyboards(value_search, index)
            data_list = await show_list.list_keyboard()
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            await bot.send_message(callback_query.message.chat.id, f'üóí –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{value_search}</b>:', reply_markup=data_list)
    else:
        await callback_query.answer(text="–¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç", show_alert=False)


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–∫—Ä—ã—Ç–∏—è
@dp.callback_query_handler(lambda c: 'inline_button_hide' in c.data,
                           lambda add_mass: config.add_mass == [])
async def process_callback_button_hide(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å
@dp.callback_query_handler(lambda c: 'inline_button_delete' in c.data,
                           lambda add_mass: config.add_mass == [])
async def process_callback_button_delete(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split('-')[1])
    # print('DELETE INDEX:', index)
    hej = SQL()
    await hej.delete(index)
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    temp = await bot.send_message(callback_query.message.chat.id, 'üî• –ü–∞—Ä–æ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã')
    asyncio.create_task(engine.delete_message(temp.message_id, 30))


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@dp.callback_query_handler(lambda c: 'inline_button_edit' in c.data,
                           lambda add_mass: config.add_mass == [])
async def process_callback_button_edit(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split('-')[1])
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await callback_query.message.answer(
        'üñã –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–í–≤–µ–¥–∏ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ')
    config.add_mass.append(index)
    for i in range(6):
        config.add_mass.append(False)


""" OTHER """


# –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç
@dp.message_handler(lambda message: str(message.chat.id) != config.id_admin)
async def whois(message: types.Message):
    print('WHOIS:', message)

if __name__ == '__main__':
    executor.start_polling(dp)
